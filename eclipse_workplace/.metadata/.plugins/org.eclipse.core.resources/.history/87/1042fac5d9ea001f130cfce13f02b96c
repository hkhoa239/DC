package org.cloudbus.cloudsim.examples;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import org.cloudbus.cloudsim.Cloudlet;
import org.cloudbus.cloudsim.CloudletSchedulerTimeShared;
import org.cloudbus.cloudsim.Datacenter;
import org.cloudbus.cloudsim.DatacenterBroker;
import org.cloudbus.cloudsim.DatacenterCharacteristics;
import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Log;
import org.cloudbus.cloudsim.Pe;
import org.cloudbus.cloudsim.Storage;
import org.cloudbus.cloudsim.UtilizationModel;
import org.cloudbus.cloudsim.UtilizationModelFull;
import org.cloudbus.cloudsim.Vm;
import org.cloudbus.cloudsim.VmAllocationPolicySimple;
import org.cloudbus.cloudsim.VmSchedulerTimeShared;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;

public class CloudSimExample {
	private static List<Cloudlet> cloudletList;
	
	private static List<Vm> vmList;
	
	private static final double[] Row1 = new double[7];
	private static final double[] Row2 = new double[7];
	
	@SupperWarnings("unnused")
	
	public static void main(String[] args) {
		Log.println("Starting CloudSimExample....");
		
		try {
			File file = new File("Output.csv");
			if (file.createNewFile()) {
				Log.println("File created: " + file.getName() + "\n");
			} else {
				Log.println("Deleting/Overwriting file...\n");
				file.delete();
			}
		} catch (IOException e) {
			System.out.println("An error occured.");
		}
		try {
			int num_user = 1;
			Calendar calendar = Calendar.getInstance();
			boolean trace_flag = false;
			
			CloudSim.init(num_user, calendar, trace_flag);
			
			Datacenter datacenter0 = createDatacenter("Datacenter_0");
			
			DatacenterBroker broker = createBroker();
			int brokerId = broker.getId();
			
			vmList = new ArrayList<>();
			
			//vm description
			int vmid = 0;
			int mips = 1000;
			long size = 10000; //image size (MB)
			long bw = 1000;
			int ram = 512;
			int pesNumber = 1;
			String vmm = "Xen";
			
			Vm vm = new Vm(vmid, brokerId, mips, pesNumber, ram, 
					bw, size, vmm, new CloudletSchedulerTimeShared());
			
			vmList.add(vm);
			
			broker.submitGuestList(vmList);
			
			cloudletList = new ArrayList<>();
			
			Random rnd = new Random();
			int id = 0;
			long length1 = rnd.nextInt(400000);
			long length2 = rnd.nextInt(400000);
			long fileSize = 300;
			long outputSize = 300;
			UtilizationModel utilizationModel = new UtilizationModelFull();
			Cloudlet cloudlet1 = new Cloudlet(id, length1, pesNumber,
											fileSize, outputSize, utilizationModel,
											utilizationModel, utilizationModel);
			cloudlet1.setUserId(brokerId);
			cloudlet1.setGuestId(vmid);
			
			id ++;
			Cloudlet cloudlet2 = new Cloudlet(id, length2, pesNumber, fileSize, 
											outputSize, utilizationModel, 
											utilizationModel, utilizationModel);
			cloudlet2.setUserId(brokerId);
			cloudlet2.setGuestId(vmid);
			
			Row1[0] = 0;
			Row1[1] = length1;
			
			Row2[0] = 1;
			Row2[1] = length2;
			
			cloudletList.add(cloudlet1);
			cloudletList.add(cloudlet2);
			
			broker.submitCloudletList(cloudletList);
			CloudSim.startSimulation();
			CloudSim.stopSimulation();
			
			List<Cloudlet> newList = broker.getCloudletReceivedList();
			printCloudletList(newList);
			
			Log.println("CloudSimExample finished!");
			
		} catch (NullPointerException e) {
			Log.println("Unwanted errors happen");
		}
	}

	private static void printCloudletList(List<Cloudlet> list) {
		int size = list.size();
		Cloudlet cloudlet;
		String indent = "        ";
		Log.println();
		Log.println("========== OUTPUT ==========");
		Log.println("Cloudlet ID" + indent + "STATUS" + indent 
				+ "Data center ID" + indent + "VM ID" + indent + "Time" 
				+ indent + "Start Time" + indent + "Finish Time");
		
		DecimalFormat dft = new DecimalFormat("###.##");
		for (int i = 0; i < size; i++) {
			cloudlet = list.get(i);
			Log.print(indent + cloudlet.getCloudletId() + indent + indent);
			
			if (cloudlet.getCloudletStatus()==Cloudlet.SUCCESS);
		}
		
	}

	private static DatacenterBroker createBroker() {
		DatacenterBroker broker = null;
		try {
			broker = new DatacenterBroker("Broker");
		} catch (Exception e) {
			return null;
		}
		return broker;
	}

	private static Datacenter createDatacenter(String name) {
		List<Host> hostList = new ArrayList<>();
		
		List<Pe> peList = new ArrayList<>();
		
		int mips = 1000;
		
		peList.add(new Pe(0, new PeProvisionerSimple(mips)));
		
		int hostId = 0;
		// MB
		int ram = 2048;
		long storage = 1000000;
		int bw = 10000;
		
		hostList.add(new Host(
						hostId, 
						new RamProvisionerSimple(ram),
						new BwProvisionerSimple(bw),
						storage,
						peList,
						new VmSchedulerTimeShared(peList)
					)
		);
		
		
		String arch = "x86";
		String os = "Linux";
		String vmm = "Xen";
		double time_zone = 10.0;
		double cost = 3.0;
		double costPerMem = 0.05;
		double costPerStorage = 0.001;
		double costPerBw = 0.0;
		
		LinkedList<Storage> storageList = new LinkedList<>();
		
		DatacenterCharacteristics characteristics = 
				new DatacenterCharacteristics(
						arch, os, vmm, hostList, 
						time_zone, cost, costPerMem,
						costPerStorage, costPerBw);
		
		Datacenter datacenter = null;
		try {
			datacenter = new Datacenter(name, characteristics,
					new VmAllocationPolicySimple(hostList), 
					storageList, 0);
		} catch (Exception e) {}
		return datacenter;
	
	}

	
}







